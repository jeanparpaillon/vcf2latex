#!/usr/bin/env python

import os, sys
import hashlib
import vobject

def usage():
    print "Usage: " + sys.argv[0] + " /path/to/vcf"

def gen(card):
    
    lines = {}
    if hasattr(card, 'fn'):
        lines["name"] = card.fn.value
    else:
        return

    if hasattr(card, 'tel'):
        for tel in card.tel_list:
            if tel.type_param == 'HOME':
                lines["p.phone"] = tel.value
            elif tel.type_param == 'CELL':
                lines["p.cellular"] = tel.value
            elif tel.type_param == 'WORK':
                lines["w.phone"] = tel.value
            else:
                lines["r.phone"] = tel.value
    else:
        return
            
    if hasattr(card, 'email'):
        for email in card.email_list:
            if email.type_param == 'HOME':
                lines["p.email"] = email.value
            elif email.type_param == 'WORK':
                lines["w.email"] = email.value
            else:
                lines["r.email"] = email.value

    print "@person{%s," % (hashlib.md5(card.__str__()).hexdigest(), )
    print ", \n".join(map(lambda (k,v): (u"%s = \"%s\"" % (k, v)).encode('utf8'), lines.items()))
    print "}\n"

def parse(cards):
    try:
        card = cards.next()
        gen(card)
        parse(cards)
    except StopIteration:
        pass

def main(args):
    if (len(args) < 1):
        usage()
        sys.exit(1)

    if (not os.path.exists(args[0])):
        print "E: Invalid path " + args[0]
        sys.exit(1)

    with open(args[0]) as f:
        parse(vobject.readComponents(f))

    sys.exit(0)
    
if __name__ == '__main__':
    main(sys.argv[1:])
